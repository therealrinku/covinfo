[{"C:\\Users\\Rinku\\codes\\react\\easement\\src\\index.js":"1","C:\\Users\\Rinku\\codes\\react\\easement\\src\\App\\App.js":"2","C:\\Users\\Rinku\\codes\\react\\easement\\src\\Components\\SearchSection\\SearchSection.jsx":"3","C:\\Users\\Rinku\\codes\\react\\easement\\src\\Components\\TodaySummary\\TodaySummary.jsx":"4"},{"size":223,"mtime":1607255209708,"results":"5","hashOfConfig":"6"},{"size":5144,"mtime":1607392909097,"results":"7","hashOfConfig":"6"},{"size":2666,"mtime":1607392437948,"results":"8","hashOfConfig":"6"},{"size":791,"mtime":1607392494011,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"n3r4s3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\Rinku\\codes\\react\\easement\\src\\index.js",[],["21","22"],"C:\\Users\\Rinku\\codes\\react\\easement\\src\\App\\App.js",["23"],"import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Moment from \"moment\";\r\nimport \"./App.css\";\r\nimport SearchSection from \"../Components/SearchSection/SearchSection\";\r\nimport TodaySummary from \"../Components/TodaySummary/TodaySummary\";\r\nimport { MdErrorOutline } from \"react-icons/md\";\r\n\r\nconst App = () => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [casesHistoryData, setCasesHistoryData] = useState([]);\r\n  const [recoveredHistoryData, setRecoveredHistoryData] = useState([]);\r\n  const [deathsHistoryData, setdeathsHistoryData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const globalDataFetchingUrl = `https://disease.sh/v3/covid-19/all`;\r\n    const countryDataFetchingUrl = `https://disease.sh/v3/covid-19/countries/${selectedCountry}`;\r\n\r\n    fetch(selectedCountry ? countryDataFetchingUrl : globalDataFetchingUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (!data.message) {\r\n          console.log(data);\r\n          setData(data);\r\n        } else {\r\n          setError(data.message);\r\n\r\n          setTimeout(() => {\r\n            setError(\"\");\r\n          }, 3000);\r\n        }\r\n      });\r\n\r\n    const historicalDataCountrySpecificURL = `https://disease.sh/v3/covid-19/historical/${selectedCountry}`;\r\n    const historicalDataWorldSpecificURL = `https://disease.sh/v3/covid-19/historical/all`;\r\n\r\n    fetch(\r\n      selectedCountry !== \"\"\r\n        ? historicalDataCountrySpecificURL\r\n        : historicalDataWorldSpecificURL\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.timeline) {\r\n          setCasesHistoryData(data.timeline.cases);\r\n          setRecoveredHistoryData(data.timeline.recovered);\r\n          setdeathsHistoryData(data.timeline.deaths);\r\n        } else if (data.cases) {\r\n          setCasesHistoryData(data.cases);\r\n          setRecoveredHistoryData(data.recovered);\r\n          setdeathsHistoryData(data.deaths);\r\n        }\r\n      });\r\n  }, [selectedCountry]);\r\n\r\n  let lineLabelData = [];\r\n  for (let e in casesHistoryData) {\r\n    lineLabelData.push(Moment(e).format(\"ll\"));\r\n  }\r\n\r\n  let caseNumData = [];\r\n  for (let e in casesHistoryData) {\r\n    caseNumData.push(casesHistoryData[e]);\r\n  }\r\n\r\n  let casesDailyTollData = [].filter((e) => {\r\n    return e !== undefined;\r\n  });\r\n  for (let e in caseNumData) {\r\n    casesDailyTollData.push(caseNumData[e] - caseNumData[e - 1]);\r\n  }\r\n\r\n  //new\r\n  let deathsNumData = [];\r\n  for (let e in deathsHistoryData) {\r\n    deathsNumData.push(deathsHistoryData[e]);\r\n  }\r\n\r\n  let deathsDailyTollData = [].filter((e) => {\r\n    return e !== undefined;\r\n  });\r\n  for (let e in deathsNumData) {\r\n    deathsDailyTollData.push(deathsNumData[e] - deathsNumData[e - 1]);\r\n  }\r\n\r\n  //\r\n  let recoveredNumData = [];\r\n  for (let e in recoveredHistoryData) {\r\n    recoveredNumData.push(recoveredHistoryData[e]);\r\n  }\r\n\r\n  let recoveredDailyTollData = [].filter((e) => {\r\n    return e !== undefined;\r\n  });\r\n  for (let e in recoveredNumData) {\r\n    recoveredDailyTollData.push(recoveredNumData[e] - recoveredNumData[e - 1]);\r\n  }\r\n\r\n  const lineData = {\r\n    labels: lineLabelData.slice(-7),\r\n    yLabels: [0, 5000, 10000, 50000, 100000],\r\n    datasets: [\r\n      {\r\n        label: \"Infected\",\r\n        data: casesDailyTollData.slice(-7),\r\n        borderColor: \"#0f7173\",\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        data: recoveredDailyTollData.slice(-7),\r\n        borderColor: \"#09814a\",\r\n      },\r\n      {\r\n        label: \"Deaths\",\r\n        data: deathsDailyTollData.slice(-7),\r\n        borderColor: \"#f05d5e\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <br />\r\n\r\n      <SearchSection\r\n        searchQuery={searchQuery}\r\n        setSearchQuery={setSearchQuery}\r\n        currentCountryName={data.country}\r\n        selectedCountry={selectedCountry}\r\n        setSelectedCountry={setSelectedCountry}\r\n        error={error}\r\n      />\r\n\r\n      <TodaySummary\r\n        todayCases={data.todayCases}\r\n        todayDeaths={data.todayDeaths}\r\n        todayRecovered={data.todayRecovered}\r\n        error={error}\r\n      />\r\n\r\n      <div className=\"line\">\r\n        <p>Last 7 days info</p>\r\n        <p style={{ color: \"red\" }}>{error}</p>\r\n        <Line\r\n          data={lineData}\r\n          options={{\r\n            scales: {\r\n              xAxes: [\r\n                {\r\n                  display: false, //this will remove all the x-axis grid lines\r\n                },\r\n              ],\r\n            },\r\n            tooltips: {\r\n              callbacks: {\r\n                label: function (tooltipItem, data) {\r\n                  var tooltipValue =\r\n                    data.datasets[tooltipItem.datasetIndex].data[\r\n                      tooltipItem.index\r\n                    ];\r\n                  return parseInt(tooltipValue).toLocaleString();\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Rinku\\codes\\react\\easement\\src\\Components\\SearchSection\\SearchSection.jsx",[],["24","25"],"C:\\Users\\Rinku\\codes\\react\\easement\\src\\Components\\TodaySummary\\TodaySummary.jsx",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":7,"column":10,"nodeType":"32","messageId":"33","endLine":7,"endColumn":24},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'MdErrorOutline' is defined but never used.","Identifier","unusedVar",["36"],["37"],"no-global-assign","no-unsafe-negation"]